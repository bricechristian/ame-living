{% comment %} 
    EG Color Swatches
    Â© 2022 EcomGraduates
    https://wwww.ecomgraduates.com
{% endcomment %}

{% if section.settings.enable_color_swatches and request.page_type == 'product' %}
    
    {% comment %}theme-check-disable{% endcomment %}
    <script src="https://unpkg.com/@popperjs/core@2" defer></script>
    <script src="https://unpkg.com/tippy.js@6" defer></script>
    {% comment %}theme-check-enable{% endcomment %}

    <style>
        .tippy-arrow {
            display: block !important;
        }
        .select.cleaned-select {
            max-width: none;
            flex-wrap: wrap;
        }
        .select.cleaned-select::before,
        .select.cleaned-select::after,
        .select.cleaned-select svg {
            display: none;
        }
        .color-swatch-label {
            padding: 0 !important;
            width: 29px !important;
            height: 29px !important;
            border-radius: 50% !important;
            text-indent: -99999px !important;
            border: none !important;
            margin-bottom: .5rem !important;
            margin-right: 1rem !important;
            background-size: cover;
        }
        .color-swatch-label::after {
            content: "";
            border: 1px solid rgba(0, 0, 0, .2);
            width: 35px;
            height: 35px;
            position: absolute;
            top: -3px;
            left: -3px;
            border-radius: 50%;
        }
        input:checked + .color-swatch-label::after {
            border-color: rgba(0, 0, 0, .9)
        }
    </style>

    <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            let optionNames = "{{ section.settings.option_names }}"
            optionNames = optionNames.replace(/ /g,'')
            optionNames = optionNames.split(',')
            // console.log(optionNames)

            {% assign testFile = 'test.png' | file_url %}
            const filesUrl = "{{ testFile | split: '/test.png' | first }}"

            optionNames.forEach((option) => {
                const selectField = document.querySelector(`select[name="options[${option}]"]`)

                if (selectField) {
                    selectField.style.display = 'none'

                    if (selectField.closest('.select')) {
                        selectField.closest('.select').classList.add('cleaned-select')
                    }

                    const label = selectField.closest('.select')?.previousElementSibling
                    if (label) {
                        label.innerHTML = `${option}: <b>${selectField.value}</b>`
                    }

                    let buildRadioList = ''

                    selectField.querySelectorAll('option').forEach((optionInSelectField) => {
                        buildRadioList += `
                            <input type="radio" id="color-swatches-${optionInSelectField.value}" name="color-swatches-${option}" value="${optionInSelectField.value}" ${optionInSelectField.value === selectField.value ? 'checked' : ''}>
                            <label 
                                class="color-swatch-label" 
                                for="color-swatches-${optionInSelectField.value}" 
                                style="background-color: ${optionInSelectField.value}; background-image: url(${filesUrl}/swatch-${optionInSelectField.value.replace(' ', '-').toLowerCase()}.png)">
                                ${optionInSelectField.text}
                            </label>
                        `
                    })

                    selectField.insertAdjacentHTML('afterend', buildRadioList)

                    document.querySelectorAll(`[name="color-swatches-${option}"]`).forEach((input) => {
                        input.addEventListener('change', (e) => {
                            selectField.value = input.value

                            const label = selectField.closest('.select')?.previousElementSibling
                            if (label) {
                                label.innerHTML = `${option}: <b>${selectField.value}</b>`
                            }
                        })
                    })
                }

                const radioInputs = document.querySelectorAll(`input[type="radio"][name="${option}"]`)
                
                if (radioInputs.length > 0) {
                    const label = radioInputs[0].previousElementSibling
                    const value = document.querySelector(`[name="${option}"]:checked`).value
                    if (label) {
                        label.innerHTML = `${option}: <b>${value}</b>`
                    }
                }

                radioInputs.forEach((input) => {
                    const label = input.nextElementSibling
                    label.classList.add('color-swatch-label')
                    label.style.backgroundColor = input.value
                    label.style.backgroundImage = `url(${filesUrl}/swatch-${input.value.replaceAll(' ', '-').toLowerCase()}.png)`
                })

                document.querySelectorAll('.color-swatch-label').forEach((label) => {
                    tippy(label, {
                        content: label.textContent,
                        placement: 'top',
                        arrow: true,
                        animation: 'fade'
                    })
                })

                document.querySelectorAll(`[name="${option}"]`).forEach((input) => {
                    input.addEventListener('change', (e) => {
                        const label = radioInputs[0].previousElementSibling
                        const value = document.querySelector(`[name="${option}"]:checked`).value
                        if (label) {
                            label.innerHTML = `${option}: <b>${value}</b>`
                        }
                    })
                })

            })
        })
    </script>
{% endif %}

{% schema %}
{
    "name": "EG Color Swatches",
    "settings": [
        {
            "type": "header",
            "content": "General"
        },
        {
            "type": "checkbox",
            "id": "enable_color_swatches",
            "label": "Enable \"Color Swatches\"",
            "info": "Quickly enable or disable this feature",
            "default": true
        },
        {
            "type": "text",
            "id": "option_names",
            "label": "Option names",
            "default": "Color",
            "info": "Comma separated list of option names to apply the color swatches. Please make sure the option name is written exactly as in the product."
        }
    ]
}
{% endschema %}
